package com.demo.abstractfactory;

/**
 * @Author: Xiaok
 * @Date: 2019/8/28 15:12
 * @version: 1.0
 * @Description: 抽象工厂
 *  抽象工厂模式：提供一个创建一系列相关或者相互依赖对象的接口，而无需指定它们具体的类。是一种对象创建型模式。
 *  在抽象工厂模式中，每一个具体工厂都提供了多个工厂方法用于产生多种不同类型的产品，这些产品构成了一个产品族。
 *  抽象工厂：声明了一组用于创建一族产品的方法，每一个方法对应一个产品。
 *  具体工厂：它实现了在抽象工厂中声明的创建产品的方法，生成一组具体产品，这些产品构成了一个产品族，每一个产品都位于某个产品等级结构中。
 *  抽象产品：它为每种产品声明接口，在抽象产品中声明了产品所具有的业务方法。
 *  具体产品：它定义具体工厂生产的具体产品对象，实现抽象产品接口中声明的业务方法。
 *
 *  抽象工厂模式对“开闭原则”的倾斜性：
 *      1.增加产品族：对于增加新的产品族，抽象工厂模式很好地支持了“开闭原则”，只需要增加具体产品并对应增加一个新的具体工厂，对已有代码无须做任何修改。
 *      2.增加新的产品等级结构：对于增加新的产品等级结构，需要修改所有的工厂角色，包括抽象工厂类，在所有的工厂类中都需要增加生产新产品的方法，违背了“开闭原则”。
 */
public interface AF_ControllerFactory {

    AF_Android createAndroid();

    AF_Symbian createSymbian();

    AF_Windows createWindows();

}
